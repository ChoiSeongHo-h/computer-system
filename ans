1.
#1. The register representing the variable k.
#t0 represent k
#    addi t0, x0, 0      #k = 0
#    ...
#    slli s3, t0, 2      #s3 = k*4
#    add t1, s1, s3      #s1 : source
#    lw t2, 0(t1)        #t2 : source[k]
#    beq t2, x0, exit    #for condition

#2. The register representing the variable sum.
#s0 represent sum
#    add t2, x0, a0      #a0 : return of fun
#    add t3, s2, s3      #s3 : 4*k, s2 : dest
#    sw t2, 0(t3)        #dest[k] = fun(source[k])
#    add s0, s0, t2      #sum += dest[k]

#3. The registers acting as pointers to the source and dest arrays.
#s1 acts as pointer of sourse
#s2 acts as pointer of dest
#    la s1, source
#    la s2, dest

#4. The assembly code for the loop found in the C code.
#loop
#    loop:                  #for loop
#        slli s3, t0, 2     #s3 = k*4
#        add t1, s1, s3     #s1 : source
#        lw t2, 0(t1)       #t2 : source[k]
#        beq t2, x0, exit   #break condition(source[k] == 0)
#        ...
#        jal x0, loop       #goto loop
#    ...
#    exit:                  #break
#    ...

#5. How the pointers are manipulated in the assembly code.
#Assume that p is pointer. if want to access *(p+n), use n(p).



2.
#1.
#.data means data section that is set of statically allocated data
#.word means that to allocate 4byte data
#.text means text section that used by program(excutable machine instructions).

#2.
#34, 9th fib num (0-indexed)

#3.
#0x10000010

#4.
#The value of memory address 0x10000010 was modified from (09 00 00 00) to (13 00 00 00). The output is 233



3
factorial:
    add t0, a0, x0  ## a = parameter
    addi t1, x0, 1  ## b = 1
    addi t2, x0, 1  ## const int t2 = 1
    beq t0, x0, end ## if(a == 0) return b = 1
    beq t0, t1, end ## if(a == 1) return b = 1
loop:				## if(a > 1)
    mul t1, t1, t0  ## b = b*a
    addi t0, t0, -1 ## a--
    beq t0, t2, end ## if(a == 1) return b = a!
    jal x0, loop    ## else goto loop
end:                ## return part
    add a0, t1, x0
    jr ra

#3! = 6, 7! = 5040, 8! = 40320
#Additionally, 0! = 1, 1! = 1